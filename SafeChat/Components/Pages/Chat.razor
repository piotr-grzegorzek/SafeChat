@page "/chat"
@using System.Web
@inject NavigationManager NavigationManager
@inject SocketService SocketService

<div class="container-fluid chat-container">
    <div class="chat-header-awaiting">
        <h3>Awaiting for participant</h3>
    </div>
    <div class="chat-messages d-flex flex-column">
        @foreach (var msg in messages)
        {
            <div class="chat-message">@msg</div>
        }
    </div>
    <div class="chat-input">
        <div class="input-group">
            <input type="text" @bind="message" class="form-control" placeholder="Type a message...">
            <button class="btn btn-primary" type="button" @onclick="SendMessage">Send</button>
        </div>
    </div>
</div>

@code {
    string message = "";
    string? role;
    string? ip;
    string? port;
    List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Uri uri = new(NavigationManager.Uri);
        role = HttpUtility.ParseQueryString(uri.Query).Get("role");
        ip = HttpUtility.ParseQueryString(uri.Query).Get("ip");
        port = HttpUtility.ParseQueryString(uri.Query).Get("port");

        if (role == "client")
        {
            await SocketService.StartClient(ip, int.Parse(port));
        }
        else if (role == "server")
        {
            await SocketService.StartServer(ip, int.Parse(port));
        }

        SocketService.MessageReceived += OnMessageReceived;
    }

    private void OnMessageReceived(string message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await SocketService.SendMessage(message);
            messages.Add($"Me: {message}");
            message = string.Empty;
        }
    }
}
