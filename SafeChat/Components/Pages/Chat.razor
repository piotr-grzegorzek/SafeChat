@page "/chat"
@using System.Web
@inject NavigationManager NavigationManager
@inject SocketService SocketService

<div class="container-fluid chat-container">
    <div class="chat-header-awaiting">
        <h3>Awaiting for participant</h3>
    </div>
    <div class="chat-messages d-flex flex-column">
        @foreach (var msg in messages)
        {
            <div class="@(msg.SentByMe ? "chat-message sent" : "chat-message received")">@msg.Content</div>
        }
    </div>
    <div class="chat-input">
        <div class="input-group">
            <input type="text" @bind="message" class="form-control" placeholder="Type a message..."
                disabled="@(!isConnected)">
            <button class="btn btn-primary" type="button" @onclick="SendMessage"
                disabled="@(!isConnected)">Send</button>
        </div>
    </div>
</div>

@code {
    string message = "";
    string? role;
    string? ip;
    string? port;
    bool isConnected = false;

    List<ChatMessage> messages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        Uri uri = new(NavigationManager.Uri);
        role = HttpUtility.ParseQueryString(uri.Query).Get("role");
        ip = HttpUtility.ParseQueryString(uri.Query).Get("ip");
        port = HttpUtility.ParseQueryString(uri.Query).Get("port");

        SocketService.MessageReceived += OnMessageReceived;
        SocketService.ConnectionEstablished += OnConnectionEstablished;
        SocketService.ConnectionClosed += OnConnectionClosed;

        if (role == "client")
        {
            await SocketService.StartClient(ip, int.Parse(port));
        }
        else if (role == "server")
        {
            await SocketService.StartServer(ip, int.Parse(port));
        }
    }

    private void OnConnectionEstablished()
    {
        isConnected = true;
        InvokeAsync(StateHasChanged);
    }

    private void OnConnectionClosed()
    {
        isConnected = false;
        messages.Add(new ChatMessage { Content = "Connection closed.", SentByMe = false });
        InvokeAsync(StateHasChanged);
    }

    private void OnMessageReceived(string message)
    {
        messages.Add(new ChatMessage { Content = message, SentByMe = false });
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await SocketService.SendMessage(message);
            messages.Add(new ChatMessage { Content = message, SentByMe = true });
            message = string.Empty;
        }
    }

    public void Dispose()
    {
        SocketService.MessageReceived -= OnMessageReceived;
        SocketService.ConnectionEstablished -= OnConnectionEstablished;
        SocketService.ConnectionClosed -= OnConnectionClosed;
        SocketService.Stop();
    }

    public class ChatMessage
    {
        public string Content { get; set; }
        public bool SentByMe { get; set; }
    }
}
