@page "/chat"
@using System.Web
@inject NavigationManager NavigationManager
@inject SocketService SocketService

<div class="container-fluid chat-container">
    <div class="@(isConnected ? "chat-header-connected" : "chat-header-awaiting")">
        <h3>@(isConnected ? "Connected - Chat is safe!" : "Awaiting for participant")</h3>
    </div>
    <div class="chat-messages d-flex flex-column">
        @foreach (var msg in messages)
        {
            <div class="@(msg.SentByMe ? "chat-message sent" : "chat-message received")">@msg.Content</div>
        }
    </div>
    <div class="chat-input">
        <button @onclick="GoBack" class="btn btn-secondary">Back</button>
        <div class="input-group">
            <input type="text" @bind="message" class="form-control" placeholder="Type a message..."
                @onkeyup="HandleEnterKey" disabled="@(!isConnected)">
            <button class="btn btn-primary" type="button" @onclick="SendMessage" disabled="@(!isConnected)">
                Send
            </button>
        </div>
    </div>
</div>

@code {
    string message = "";
    string? role;
    string? ip;
    string? port;
    bool isConnected = false;

    List<ChatMessage> messages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri uri = new(NavigationManager.Uri);
            role = HttpUtility.ParseQueryString(uri.Query).Get("role");
            ip = HttpUtility.ParseQueryString(uri.Query).Get("ip");
            port = HttpUtility.ParseQueryString(uri.Query).Get("port");

            if (role == null || ip == null || port == null)
            {
                throw new ArgumentException("Role, IP, or port is missing in the query parameters.");
            }

            SocketService.ConnectionEstablished += OnConnectionEstablished;
            SocketService.ConnectionClosed += OnConnectionClosed;
            SocketService.MessageReceived += OnMessageReceived;

            try
            {
                await SocketService.StartConnection(role, ip, int.Parse(port));
            }
            catch (Exception ex)
            {
                GoBack();
            }
        }
        catch (Exception ex)
        {
            GoBack();
        }
    }

    private void OnConnectionEstablished()
    {
        isConnected = true;
        InvokeAsync(StateHasChanged);
    }

    private void OnConnectionClosed()
    {
        isConnected = false;
        InvokeAsync(StateHasChanged);
    }

    private void OnMessageReceived(string message)
    {
        messages.Add(new ChatMessage { Content = message, SentByMe = false });
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await SocketService.SendMessage(message);
            messages.Add(new ChatMessage { Content = message, SentByMe = true });
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            SendMessage();
        }
    }

    private void GoBack()
    {
        Dispose();
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        SocketService.ConnectionEstablished -= OnConnectionEstablished;
        SocketService.ConnectionClosed -= OnConnectionClosed;
        SocketService.MessageReceived -= OnMessageReceived;
        SocketService.Stop();
    }

    public class ChatMessage
    {
        public string Content { get; set; }
        public bool SentByMe { get; set; }
    }
}